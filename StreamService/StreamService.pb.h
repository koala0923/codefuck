// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StreamService.proto

#ifndef PROTOBUF_StreamService_2eproto__INCLUDED
#define PROTOBUF_StreamService_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace StreamService {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_StreamService_2eproto();
void protobuf_AssignDesc_StreamService_2eproto();
void protobuf_ShutdownFile_StreamService_2eproto();

class LoginReq;
class LoginRes;
class HeartBeatReq;
class HeartBeatRes;
class CallReq;
class CallRes;
class HangUpReq;
class StreamExhange;

enum MessageCmdID {
  CID_LOGIN_REQ_MSG = 257,
  CID_LOGIN_RES_MSG = 258,
  CID_HEARTBEAT_REQ_MSG = 259,
  CID_HEARTBEAT_RES_MSG = 260,
  CID_CALL_REQ_MSG = 513,
  CID_CALL_RES_MSG = 514,
  CID_HANGUP_REQ_MSG = 515
};
bool MessageCmdID_IsValid(int value);
const MessageCmdID MessageCmdID_MIN = CID_LOGIN_REQ_MSG;
const MessageCmdID MessageCmdID_MAX = CID_HANGUP_REQ_MSG;
const int MessageCmdID_ARRAYSIZE = MessageCmdID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageCmdID_descriptor();
inline const ::std::string& MessageCmdID_Name(MessageCmdID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageCmdID_descriptor(), value);
}
inline bool MessageCmdID_Parse(
    const ::std::string& name, MessageCmdID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageCmdID>(
    MessageCmdID_descriptor(), name, value);
}
enum LoginResultType {
  LOGIN_RESULT_NONE = 0,
  LOGIN_RESULT_OK = 1,
  LOGIN_RESULT_FAILED = 2
};
bool LoginResultType_IsValid(int value);
const LoginResultType LoginResultType_MIN = LOGIN_RESULT_NONE;
const LoginResultType LoginResultType_MAX = LOGIN_RESULT_FAILED;
const int LoginResultType_ARRAYSIZE = LoginResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginResultType_descriptor();
inline const ::std::string& LoginResultType_Name(LoginResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginResultType_descriptor(), value);
}
inline bool LoginResultType_Parse(
    const ::std::string& name, LoginResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginResultType>(
    LoginResultType_descriptor(), name, value);
}
enum CallType {
  CALL_TYPE_NONE = 0,
  CALL_TYPE_VOICE = 1,
  CALL_TYPE_VIDEO = 2
};
bool CallType_IsValid(int value);
const CallType CallType_MIN = CALL_TYPE_NONE;
const CallType CallType_MAX = CALL_TYPE_VIDEO;
const int CallType_ARRAYSIZE = CallType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CallType_descriptor();
inline const ::std::string& CallType_Name(CallType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CallType_descriptor(), value);
}
inline bool CallType_Parse(
    const ::std::string& name, CallType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CallType>(
    CallType_descriptor(), name, value);
}
enum CallResultType {
  CALL_Result_NONE = 0,
  CALL_Result_USER_OFFLINE = 1,
  CALL_Result_USER_REFUSE = 2,
  CALL_Result_USER_ACCEPT = 3
};
bool CallResultType_IsValid(int value);
const CallResultType CallResultType_MIN = CALL_Result_NONE;
const CallResultType CallResultType_MAX = CALL_Result_USER_ACCEPT;
const int CallResultType_ARRAYSIZE = CallResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CallResultType_descriptor();
inline const ::std::string& CallResultType_Name(CallResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CallResultType_descriptor(), value);
}
inline bool CallResultType_Parse(
    const ::std::string& name, CallResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CallResultType>(
    CallResultType_descriptor(), name, value);
}
// ===================================================================

class LoginReq : public ::google::protobuf::Message {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  void Swap(LoginReq* other);

  // implements Message ----------------------------------------------

  inline LoginReq* New() const { return New(NULL); }

  LoginReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string reversed = 10;
  inline bool has_reversed() const;
  inline void clear_reversed();
  static const int kReversedFieldNumber = 10;
  inline const ::std::string& reversed() const;
  inline void set_reversed(const ::std::string& value);
  inline void set_reversed(const char* value);
  inline void set_reversed(const char* value, size_t size);
  inline ::std::string* mutable_reversed();
  inline ::std::string* release_reversed();
  inline void set_allocated_reversed(::std::string* reversed);

  // @@protoc_insertion_point(class_scope:StreamService.LoginReq)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_reversed();
  inline void clear_has_reversed();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr reversed_;
  friend void  protobuf_AddDesc_StreamService_2eproto();
  friend void protobuf_AssignDesc_StreamService_2eproto();
  friend void protobuf_ShutdownFile_StreamService_2eproto();

  void InitAsDefaultInstance();
  static LoginReq* default_instance_;
};
// -------------------------------------------------------------------

class LoginRes : public ::google::protobuf::Message {
 public:
  LoginRes();
  virtual ~LoginRes();

  LoginRes(const LoginRes& from);

  inline LoginRes& operator=(const LoginRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRes& default_instance();

  void Swap(LoginRes* other);

  // implements Message ----------------------------------------------

  inline LoginRes* New() const { return New(NULL); }

  LoginRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRes& from);
  void MergeFrom(const LoginRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .StreamService.LoginResultType result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::StreamService::LoginResultType result_code() const;
  inline void set_result_code(::StreamService::LoginResultType value);

  // optional string result_string = 2;
  inline bool has_result_string() const;
  inline void clear_result_string();
  static const int kResultStringFieldNumber = 2;
  inline const ::std::string& result_string() const;
  inline void set_result_string(const ::std::string& value);
  inline void set_result_string(const char* value);
  inline void set_result_string(const char* value, size_t size);
  inline ::std::string* mutable_result_string();
  inline ::std::string* release_result_string();
  inline void set_allocated_result_string(::std::string* result_string);

  // optional string reversed = 10;
  inline bool has_reversed() const;
  inline void clear_reversed();
  static const int kReversedFieldNumber = 10;
  inline const ::std::string& reversed() const;
  inline void set_reversed(const ::std::string& value);
  inline void set_reversed(const char* value);
  inline void set_reversed(const char* value, size_t size);
  inline ::std::string* mutable_reversed();
  inline ::std::string* release_reversed();
  inline void set_allocated_reversed(::std::string* reversed);

  // @@protoc_insertion_point(class_scope:StreamService.LoginRes)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_result_string();
  inline void clear_has_result_string();
  inline void set_has_reversed();
  inline void clear_has_reversed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr result_string_;
  ::google::protobuf::internal::ArenaStringPtr reversed_;
  int result_code_;
  friend void  protobuf_AddDesc_StreamService_2eproto();
  friend void protobuf_AssignDesc_StreamService_2eproto();
  friend void protobuf_ShutdownFile_StreamService_2eproto();

  void InitAsDefaultInstance();
  static LoginRes* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeatReq : public ::google::protobuf::Message {
 public:
  HeartBeatReq();
  virtual ~HeartBeatReq();

  HeartBeatReq(const HeartBeatReq& from);

  inline HeartBeatReq& operator=(const HeartBeatReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatReq& default_instance();

  void Swap(HeartBeatReq* other);

  // implements Message ----------------------------------------------

  inline HeartBeatReq* New() const { return New(NULL); }

  HeartBeatReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeatReq& from);
  void MergeFrom(const HeartBeatReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartBeatReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required uint32 msg_id = 2;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);

  // optional string reversed = 10;
  inline bool has_reversed() const;
  inline void clear_reversed();
  static const int kReversedFieldNumber = 10;
  inline const ::std::string& reversed() const;
  inline void set_reversed(const ::std::string& value);
  inline void set_reversed(const char* value);
  inline void set_reversed(const char* value, size_t size);
  inline ::std::string* mutable_reversed();
  inline ::std::string* release_reversed();
  inline void set_allocated_reversed(::std::string* reversed);

  // @@protoc_insertion_point(class_scope:StreamService.HeartBeatReq)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_reversed();
  inline void clear_has_reversed();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr reversed_;
  ::google::protobuf::uint32 msg_id_;
  friend void  protobuf_AddDesc_StreamService_2eproto();
  friend void protobuf_AssignDesc_StreamService_2eproto();
  friend void protobuf_ShutdownFile_StreamService_2eproto();

  void InitAsDefaultInstance();
  static HeartBeatReq* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeatRes : public ::google::protobuf::Message {
 public:
  HeartBeatRes();
  virtual ~HeartBeatRes();

  HeartBeatRes(const HeartBeatRes& from);

  inline HeartBeatRes& operator=(const HeartBeatRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatRes& default_instance();

  void Swap(HeartBeatRes* other);

  // implements Message ----------------------------------------------

  inline HeartBeatRes* New() const { return New(NULL); }

  HeartBeatRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeatRes& from);
  void MergeFrom(const HeartBeatRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartBeatRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required uint32 msg_id = 2;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);

  // optional string reversed = 10;
  inline bool has_reversed() const;
  inline void clear_reversed();
  static const int kReversedFieldNumber = 10;
  inline const ::std::string& reversed() const;
  inline void set_reversed(const ::std::string& value);
  inline void set_reversed(const char* value);
  inline void set_reversed(const char* value, size_t size);
  inline ::std::string* mutable_reversed();
  inline ::std::string* release_reversed();
  inline void set_allocated_reversed(::std::string* reversed);

  // @@protoc_insertion_point(class_scope:StreamService.HeartBeatRes)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_reversed();
  inline void clear_has_reversed();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr reversed_;
  ::google::protobuf::uint32 msg_id_;
  friend void  protobuf_AddDesc_StreamService_2eproto();
  friend void protobuf_AssignDesc_StreamService_2eproto();
  friend void protobuf_ShutdownFile_StreamService_2eproto();

  void InitAsDefaultInstance();
  static HeartBeatRes* default_instance_;
};
// -------------------------------------------------------------------

class CallReq : public ::google::protobuf::Message {
 public:
  CallReq();
  virtual ~CallReq();

  CallReq(const CallReq& from);

  inline CallReq& operator=(const CallReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallReq& default_instance();

  void Swap(CallReq* other);

  // implements Message ----------------------------------------------

  inline CallReq* New() const { return New(NULL); }

  CallReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallReq& from);
  void MergeFrom(const CallReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from_user_name = 1;
  inline bool has_from_user_name() const;
  inline void clear_from_user_name();
  static const int kFromUserNameFieldNumber = 1;
  inline const ::std::string& from_user_name() const;
  inline void set_from_user_name(const ::std::string& value);
  inline void set_from_user_name(const char* value);
  inline void set_from_user_name(const char* value, size_t size);
  inline ::std::string* mutable_from_user_name();
  inline ::std::string* release_from_user_name();
  inline void set_allocated_from_user_name(::std::string* from_user_name);

  // required string to_session_name = 2;
  inline bool has_to_session_name() const;
  inline void clear_to_session_name();
  static const int kToSessionNameFieldNumber = 2;
  inline const ::std::string& to_session_name() const;
  inline void set_to_session_name(const ::std::string& value);
  inline void set_to_session_name(const char* value);
  inline void set_to_session_name(const char* value, size_t size);
  inline ::std::string* mutable_to_session_name();
  inline ::std::string* release_to_session_name();
  inline void set_allocated_to_session_name(::std::string* to_session_name);

  // required .StreamService.CallType call_type = 3;
  inline bool has_call_type() const;
  inline void clear_call_type();
  static const int kCallTypeFieldNumber = 3;
  inline ::StreamService::CallType call_type() const;
  inline void set_call_type(::StreamService::CallType value);

  // optional string reversed = 10;
  inline bool has_reversed() const;
  inline void clear_reversed();
  static const int kReversedFieldNumber = 10;
  inline const ::std::string& reversed() const;
  inline void set_reversed(const ::std::string& value);
  inline void set_reversed(const char* value);
  inline void set_reversed(const char* value, size_t size);
  inline ::std::string* mutable_reversed();
  inline ::std::string* release_reversed();
  inline void set_allocated_reversed(::std::string* reversed);

  // @@protoc_insertion_point(class_scope:StreamService.CallReq)
 private:
  inline void set_has_from_user_name();
  inline void clear_has_from_user_name();
  inline void set_has_to_session_name();
  inline void clear_has_to_session_name();
  inline void set_has_call_type();
  inline void clear_has_call_type();
  inline void set_has_reversed();
  inline void clear_has_reversed();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_user_name_;
  ::google::protobuf::internal::ArenaStringPtr to_session_name_;
  ::google::protobuf::internal::ArenaStringPtr reversed_;
  int call_type_;
  friend void  protobuf_AddDesc_StreamService_2eproto();
  friend void protobuf_AssignDesc_StreamService_2eproto();
  friend void protobuf_ShutdownFile_StreamService_2eproto();

  void InitAsDefaultInstance();
  static CallReq* default_instance_;
};
// -------------------------------------------------------------------

class CallRes : public ::google::protobuf::Message {
 public:
  CallRes();
  virtual ~CallRes();

  CallRes(const CallRes& from);

  inline CallRes& operator=(const CallRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallRes& default_instance();

  void Swap(CallRes* other);

  // implements Message ----------------------------------------------

  inline CallRes* New() const { return New(NULL); }

  CallRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallRes& from);
  void MergeFrom(const CallRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from_user_name = 1;
  inline bool has_from_user_name() const;
  inline void clear_from_user_name();
  static const int kFromUserNameFieldNumber = 1;
  inline const ::std::string& from_user_name() const;
  inline void set_from_user_name(const ::std::string& value);
  inline void set_from_user_name(const char* value);
  inline void set_from_user_name(const char* value, size_t size);
  inline ::std::string* mutable_from_user_name();
  inline ::std::string* release_from_user_name();
  inline void set_allocated_from_user_name(::std::string* from_user_name);

  // required string to_session_name = 2;
  inline bool has_to_session_name() const;
  inline void clear_to_session_name();
  static const int kToSessionNameFieldNumber = 2;
  inline const ::std::string& to_session_name() const;
  inline void set_to_session_name(const ::std::string& value);
  inline void set_to_session_name(const char* value);
  inline void set_to_session_name(const char* value, size_t size);
  inline ::std::string* mutable_to_session_name();
  inline ::std::string* release_to_session_name();
  inline void set_allocated_to_session_name(::std::string* to_session_name);

  // required .StreamService.CallType call_type = 3;
  inline bool has_call_type() const;
  inline void clear_call_type();
  static const int kCallTypeFieldNumber = 3;
  inline ::StreamService::CallType call_type() const;
  inline void set_call_type(::StreamService::CallType value);

  // required .StreamService.CallResultType call_result_type = 4;
  inline bool has_call_result_type() const;
  inline void clear_call_result_type();
  static const int kCallResultTypeFieldNumber = 4;
  inline ::StreamService::CallResultType call_result_type() const;
  inline void set_call_result_type(::StreamService::CallResultType value);

  // optional string reversed = 10;
  inline bool has_reversed() const;
  inline void clear_reversed();
  static const int kReversedFieldNumber = 10;
  inline const ::std::string& reversed() const;
  inline void set_reversed(const ::std::string& value);
  inline void set_reversed(const char* value);
  inline void set_reversed(const char* value, size_t size);
  inline ::std::string* mutable_reversed();
  inline ::std::string* release_reversed();
  inline void set_allocated_reversed(::std::string* reversed);

  // @@protoc_insertion_point(class_scope:StreamService.CallRes)
 private:
  inline void set_has_from_user_name();
  inline void clear_has_from_user_name();
  inline void set_has_to_session_name();
  inline void clear_has_to_session_name();
  inline void set_has_call_type();
  inline void clear_has_call_type();
  inline void set_has_call_result_type();
  inline void clear_has_call_result_type();
  inline void set_has_reversed();
  inline void clear_has_reversed();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_user_name_;
  ::google::protobuf::internal::ArenaStringPtr to_session_name_;
  int call_type_;
  int call_result_type_;
  ::google::protobuf::internal::ArenaStringPtr reversed_;
  friend void  protobuf_AddDesc_StreamService_2eproto();
  friend void protobuf_AssignDesc_StreamService_2eproto();
  friend void protobuf_ShutdownFile_StreamService_2eproto();

  void InitAsDefaultInstance();
  static CallRes* default_instance_;
};
// -------------------------------------------------------------------

class HangUpReq : public ::google::protobuf::Message {
 public:
  HangUpReq();
  virtual ~HangUpReq();

  HangUpReq(const HangUpReq& from);

  inline HangUpReq& operator=(const HangUpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HangUpReq& default_instance();

  void Swap(HangUpReq* other);

  // implements Message ----------------------------------------------

  inline HangUpReq* New() const { return New(NULL); }

  HangUpReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HangUpReq& from);
  void MergeFrom(const HangUpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HangUpReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from_user_name = 1;
  inline bool has_from_user_name() const;
  inline void clear_from_user_name();
  static const int kFromUserNameFieldNumber = 1;
  inline const ::std::string& from_user_name() const;
  inline void set_from_user_name(const ::std::string& value);
  inline void set_from_user_name(const char* value);
  inline void set_from_user_name(const char* value, size_t size);
  inline ::std::string* mutable_from_user_name();
  inline ::std::string* release_from_user_name();
  inline void set_allocated_from_user_name(::std::string* from_user_name);

  // required string to_session_name = 2;
  inline bool has_to_session_name() const;
  inline void clear_to_session_name();
  static const int kToSessionNameFieldNumber = 2;
  inline const ::std::string& to_session_name() const;
  inline void set_to_session_name(const ::std::string& value);
  inline void set_to_session_name(const char* value);
  inline void set_to_session_name(const char* value, size_t size);
  inline ::std::string* mutable_to_session_name();
  inline ::std::string* release_to_session_name();
  inline void set_allocated_to_session_name(::std::string* to_session_name);

  // required .StreamService.CallType call_type = 3;
  inline bool has_call_type() const;
  inline void clear_call_type();
  static const int kCallTypeFieldNumber = 3;
  inline ::StreamService::CallType call_type() const;
  inline void set_call_type(::StreamService::CallType value);

  // optional string reversed = 10;
  inline bool has_reversed() const;
  inline void clear_reversed();
  static const int kReversedFieldNumber = 10;
  inline const ::std::string& reversed() const;
  inline void set_reversed(const ::std::string& value);
  inline void set_reversed(const char* value);
  inline void set_reversed(const char* value, size_t size);
  inline ::std::string* mutable_reversed();
  inline ::std::string* release_reversed();
  inline void set_allocated_reversed(::std::string* reversed);

  // @@protoc_insertion_point(class_scope:StreamService.HangUpReq)
 private:
  inline void set_has_from_user_name();
  inline void clear_has_from_user_name();
  inline void set_has_to_session_name();
  inline void clear_has_to_session_name();
  inline void set_has_call_type();
  inline void clear_has_call_type();
  inline void set_has_reversed();
  inline void clear_has_reversed();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_user_name_;
  ::google::protobuf::internal::ArenaStringPtr to_session_name_;
  ::google::protobuf::internal::ArenaStringPtr reversed_;
  int call_type_;
  friend void  protobuf_AddDesc_StreamService_2eproto();
  friend void protobuf_AssignDesc_StreamService_2eproto();
  friend void protobuf_ShutdownFile_StreamService_2eproto();

  void InitAsDefaultInstance();
  static HangUpReq* default_instance_;
};
// -------------------------------------------------------------------

class StreamExhange : public ::google::protobuf::Message {
 public:
  StreamExhange();
  virtual ~StreamExhange();

  StreamExhange(const StreamExhange& from);

  inline StreamExhange& operator=(const StreamExhange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamExhange& default_instance();

  void Swap(StreamExhange* other);

  // implements Message ----------------------------------------------

  inline StreamExhange* New() const { return New(NULL); }

  StreamExhange* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamExhange& from);
  void MergeFrom(const StreamExhange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamExhange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from_user_name = 1;
  inline bool has_from_user_name() const;
  inline void clear_from_user_name();
  static const int kFromUserNameFieldNumber = 1;
  inline const ::std::string& from_user_name() const;
  inline void set_from_user_name(const ::std::string& value);
  inline void set_from_user_name(const char* value);
  inline void set_from_user_name(const char* value, size_t size);
  inline ::std::string* mutable_from_user_name();
  inline ::std::string* release_from_user_name();
  inline void set_allocated_from_user_name(::std::string* from_user_name);

  // repeated string to_session_name = 2;
  inline int to_session_name_size() const;
  inline void clear_to_session_name();
  static const int kToSessionNameFieldNumber = 2;
  inline const ::std::string& to_session_name(int index) const;
  inline ::std::string* mutable_to_session_name(int index);
  inline void set_to_session_name(int index, const ::std::string& value);
  inline void set_to_session_name(int index, const char* value);
  inline void set_to_session_name(int index, const char* value, size_t size);
  inline ::std::string* add_to_session_name();
  inline void add_to_session_name(const ::std::string& value);
  inline void add_to_session_name(const char* value);
  inline void add_to_session_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& to_session_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_to_session_name();

  // required .StreamService.CallType call_type = 3;
  inline bool has_call_type() const;
  inline void clear_call_type();
  static const int kCallTypeFieldNumber = 3;
  inline ::StreamService::CallType call_type() const;
  inline void set_call_type(::StreamService::CallType value);

  // optional string reversed = 10;
  inline bool has_reversed() const;
  inline void clear_reversed();
  static const int kReversedFieldNumber = 10;
  inline const ::std::string& reversed() const;
  inline void set_reversed(const ::std::string& value);
  inline void set_reversed(const char* value);
  inline void set_reversed(const char* value, size_t size);
  inline ::std::string* mutable_reversed();
  inline ::std::string* release_reversed();
  inline void set_allocated_reversed(::std::string* reversed);

  // @@protoc_insertion_point(class_scope:StreamService.StreamExhange)
 private:
  inline void set_has_from_user_name();
  inline void clear_has_from_user_name();
  inline void set_has_call_type();
  inline void clear_has_call_type();
  inline void set_has_reversed();
  inline void clear_has_reversed();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_user_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> to_session_name_;
  ::google::protobuf::internal::ArenaStringPtr reversed_;
  int call_type_;
  friend void  protobuf_AddDesc_StreamService_2eproto();
  friend void protobuf_AssignDesc_StreamService_2eproto();
  friend void protobuf_ShutdownFile_StreamService_2eproto();

  void InitAsDefaultInstance();
  static StreamExhange* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginReq

// required string user_name = 1;
inline bool LoginReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& LoginReq::user_name() const {
  // @@protoc_insertion_point(field_get:StreamService.LoginReq.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.LoginReq.user_name)
}
inline void LoginReq::set_user_name(const char* value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.LoginReq.user_name)
}
inline void LoginReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.LoginReq.user_name)
}
inline ::std::string* LoginReq::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:StreamService.LoginReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_user_name() {
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:StreamService.LoginReq.user_name)
}

// required string password = 2;
inline bool LoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:StreamService.LoginReq.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.LoginReq.password)
}
inline void LoginReq::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.LoginReq.password)
}
inline void LoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.LoginReq.password)
}
inline ::std::string* LoginReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:StreamService.LoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:StreamService.LoginReq.password)
}

// optional string reversed = 10;
inline bool LoginReq::has_reversed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginReq::set_has_reversed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginReq::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginReq::clear_reversed() {
  reversed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reversed();
}
inline const ::std::string& LoginReq::reversed() const {
  // @@protoc_insertion_point(field_get:StreamService.LoginReq.reversed)
  return reversed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_reversed(const ::std::string& value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.LoginReq.reversed)
}
inline void LoginReq::set_reversed(const char* value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.LoginReq.reversed)
}
inline void LoginReq::set_reversed(const char* value, size_t size) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.LoginReq.reversed)
}
inline ::std::string* LoginReq::mutable_reversed() {
  set_has_reversed();
  // @@protoc_insertion_point(field_mutable:StreamService.LoginReq.reversed)
  return reversed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReq::release_reversed() {
  clear_has_reversed();
  return reversed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_reversed(::std::string* reversed) {
  if (reversed != NULL) {
    set_has_reversed();
  } else {
    clear_has_reversed();
  }
  reversed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reversed);
  // @@protoc_insertion_point(field_set_allocated:StreamService.LoginReq.reversed)
}

// -------------------------------------------------------------------

// LoginRes

// required .StreamService.LoginResultType result_code = 1;
inline bool LoginRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRes::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::StreamService::LoginResultType LoginRes::result_code() const {
  // @@protoc_insertion_point(field_get:StreamService.LoginRes.result_code)
  return static_cast< ::StreamService::LoginResultType >(result_code_);
}
inline void LoginRes::set_result_code(::StreamService::LoginResultType value) {
  assert(::StreamService::LoginResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:StreamService.LoginRes.result_code)
}

// optional string result_string = 2;
inline bool LoginRes::has_result_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRes::set_has_result_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRes::clear_has_result_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRes::clear_result_string() {
  result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_result_string();
}
inline const ::std::string& LoginRes::result_string() const {
  // @@protoc_insertion_point(field_get:StreamService.LoginRes.result_string)
  return result_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRes::set_result_string(const ::std::string& value) {
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.LoginRes.result_string)
}
inline void LoginRes::set_result_string(const char* value) {
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.LoginRes.result_string)
}
inline void LoginRes::set_result_string(const char* value, size_t size) {
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.LoginRes.result_string)
}
inline ::std::string* LoginRes::mutable_result_string() {
  set_has_result_string();
  // @@protoc_insertion_point(field_mutable:StreamService.LoginRes.result_string)
  return result_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRes::release_result_string() {
  clear_has_result_string();
  return result_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRes::set_allocated_result_string(::std::string* result_string) {
  if (result_string != NULL) {
    set_has_result_string();
  } else {
    clear_has_result_string();
  }
  result_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result_string);
  // @@protoc_insertion_point(field_set_allocated:StreamService.LoginRes.result_string)
}

// optional string reversed = 10;
inline bool LoginRes::has_reversed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRes::set_has_reversed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRes::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRes::clear_reversed() {
  reversed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reversed();
}
inline const ::std::string& LoginRes::reversed() const {
  // @@protoc_insertion_point(field_get:StreamService.LoginRes.reversed)
  return reversed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRes::set_reversed(const ::std::string& value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.LoginRes.reversed)
}
inline void LoginRes::set_reversed(const char* value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.LoginRes.reversed)
}
inline void LoginRes::set_reversed(const char* value, size_t size) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.LoginRes.reversed)
}
inline ::std::string* LoginRes::mutable_reversed() {
  set_has_reversed();
  // @@protoc_insertion_point(field_mutable:StreamService.LoginRes.reversed)
  return reversed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRes::release_reversed() {
  clear_has_reversed();
  return reversed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRes::set_allocated_reversed(::std::string* reversed) {
  if (reversed != NULL) {
    set_has_reversed();
  } else {
    clear_has_reversed();
  }
  reversed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reversed);
  // @@protoc_insertion_point(field_set_allocated:StreamService.LoginRes.reversed)
}

// -------------------------------------------------------------------

// HeartBeatReq

// required string user_name = 1;
inline bool HeartBeatReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeatReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeatReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeatReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& HeartBeatReq::user_name() const {
  // @@protoc_insertion_point(field_get:StreamService.HeartBeatReq.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.HeartBeatReq.user_name)
}
inline void HeartBeatReq::set_user_name(const char* value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.HeartBeatReq.user_name)
}
inline void HeartBeatReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.HeartBeatReq.user_name)
}
inline ::std::string* HeartBeatReq::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:StreamService.HeartBeatReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatReq::release_user_name() {
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:StreamService.HeartBeatReq.user_name)
}

// required uint32 msg_id = 2;
inline bool HeartBeatReq::has_msg_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartBeatReq::set_has_msg_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartBeatReq::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartBeatReq::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 HeartBeatReq::msg_id() const {
  // @@protoc_insertion_point(field_get:StreamService.HeartBeatReq.msg_id)
  return msg_id_;
}
inline void HeartBeatReq::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:StreamService.HeartBeatReq.msg_id)
}

// optional string reversed = 10;
inline bool HeartBeatReq::has_reversed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeartBeatReq::set_has_reversed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeartBeatReq::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeartBeatReq::clear_reversed() {
  reversed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reversed();
}
inline const ::std::string& HeartBeatReq::reversed() const {
  // @@protoc_insertion_point(field_get:StreamService.HeartBeatReq.reversed)
  return reversed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatReq::set_reversed(const ::std::string& value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.HeartBeatReq.reversed)
}
inline void HeartBeatReq::set_reversed(const char* value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.HeartBeatReq.reversed)
}
inline void HeartBeatReq::set_reversed(const char* value, size_t size) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.HeartBeatReq.reversed)
}
inline ::std::string* HeartBeatReq::mutable_reversed() {
  set_has_reversed();
  // @@protoc_insertion_point(field_mutable:StreamService.HeartBeatReq.reversed)
  return reversed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatReq::release_reversed() {
  clear_has_reversed();
  return reversed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatReq::set_allocated_reversed(::std::string* reversed) {
  if (reversed != NULL) {
    set_has_reversed();
  } else {
    clear_has_reversed();
  }
  reversed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reversed);
  // @@protoc_insertion_point(field_set_allocated:StreamService.HeartBeatReq.reversed)
}

// -------------------------------------------------------------------

// HeartBeatRes

// required string user_name = 1;
inline bool HeartBeatRes::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeatRes::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeatRes::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeatRes::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& HeartBeatRes::user_name() const {
  // @@protoc_insertion_point(field_get:StreamService.HeartBeatRes.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRes::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.HeartBeatRes.user_name)
}
inline void HeartBeatRes::set_user_name(const char* value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.HeartBeatRes.user_name)
}
inline void HeartBeatRes::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.HeartBeatRes.user_name)
}
inline ::std::string* HeartBeatRes::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:StreamService.HeartBeatRes.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatRes::release_user_name() {
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRes::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:StreamService.HeartBeatRes.user_name)
}

// required uint32 msg_id = 2;
inline bool HeartBeatRes::has_msg_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartBeatRes::set_has_msg_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartBeatRes::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartBeatRes::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 HeartBeatRes::msg_id() const {
  // @@protoc_insertion_point(field_get:StreamService.HeartBeatRes.msg_id)
  return msg_id_;
}
inline void HeartBeatRes::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:StreamService.HeartBeatRes.msg_id)
}

// optional string reversed = 10;
inline bool HeartBeatRes::has_reversed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeartBeatRes::set_has_reversed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeartBeatRes::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeartBeatRes::clear_reversed() {
  reversed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reversed();
}
inline const ::std::string& HeartBeatRes::reversed() const {
  // @@protoc_insertion_point(field_get:StreamService.HeartBeatRes.reversed)
  return reversed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRes::set_reversed(const ::std::string& value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.HeartBeatRes.reversed)
}
inline void HeartBeatRes::set_reversed(const char* value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.HeartBeatRes.reversed)
}
inline void HeartBeatRes::set_reversed(const char* value, size_t size) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.HeartBeatRes.reversed)
}
inline ::std::string* HeartBeatRes::mutable_reversed() {
  set_has_reversed();
  // @@protoc_insertion_point(field_mutable:StreamService.HeartBeatRes.reversed)
  return reversed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatRes::release_reversed() {
  clear_has_reversed();
  return reversed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRes::set_allocated_reversed(::std::string* reversed) {
  if (reversed != NULL) {
    set_has_reversed();
  } else {
    clear_has_reversed();
  }
  reversed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reversed);
  // @@protoc_insertion_point(field_set_allocated:StreamService.HeartBeatRes.reversed)
}

// -------------------------------------------------------------------

// CallReq

// required string from_user_name = 1;
inline bool CallReq::has_from_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallReq::set_has_from_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallReq::clear_has_from_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallReq::clear_from_user_name() {
  from_user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_user_name();
}
inline const ::std::string& CallReq::from_user_name() const {
  // @@protoc_insertion_point(field_get:StreamService.CallReq.from_user_name)
  return from_user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallReq::set_from_user_name(const ::std::string& value) {
  set_has_from_user_name();
  from_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.CallReq.from_user_name)
}
inline void CallReq::set_from_user_name(const char* value) {
  set_has_from_user_name();
  from_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.CallReq.from_user_name)
}
inline void CallReq::set_from_user_name(const char* value, size_t size) {
  set_has_from_user_name();
  from_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.CallReq.from_user_name)
}
inline ::std::string* CallReq::mutable_from_user_name() {
  set_has_from_user_name();
  // @@protoc_insertion_point(field_mutable:StreamService.CallReq.from_user_name)
  return from_user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallReq::release_from_user_name() {
  clear_has_from_user_name();
  return from_user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallReq::set_allocated_from_user_name(::std::string* from_user_name) {
  if (from_user_name != NULL) {
    set_has_from_user_name();
  } else {
    clear_has_from_user_name();
  }
  from_user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_user_name);
  // @@protoc_insertion_point(field_set_allocated:StreamService.CallReq.from_user_name)
}

// required string to_session_name = 2;
inline bool CallReq::has_to_session_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallReq::set_has_to_session_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CallReq::clear_has_to_session_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CallReq::clear_to_session_name() {
  to_session_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_session_name();
}
inline const ::std::string& CallReq::to_session_name() const {
  // @@protoc_insertion_point(field_get:StreamService.CallReq.to_session_name)
  return to_session_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallReq::set_to_session_name(const ::std::string& value) {
  set_has_to_session_name();
  to_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.CallReq.to_session_name)
}
inline void CallReq::set_to_session_name(const char* value) {
  set_has_to_session_name();
  to_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.CallReq.to_session_name)
}
inline void CallReq::set_to_session_name(const char* value, size_t size) {
  set_has_to_session_name();
  to_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.CallReq.to_session_name)
}
inline ::std::string* CallReq::mutable_to_session_name() {
  set_has_to_session_name();
  // @@protoc_insertion_point(field_mutable:StreamService.CallReq.to_session_name)
  return to_session_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallReq::release_to_session_name() {
  clear_has_to_session_name();
  return to_session_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallReq::set_allocated_to_session_name(::std::string* to_session_name) {
  if (to_session_name != NULL) {
    set_has_to_session_name();
  } else {
    clear_has_to_session_name();
  }
  to_session_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_session_name);
  // @@protoc_insertion_point(field_set_allocated:StreamService.CallReq.to_session_name)
}

// required .StreamService.CallType call_type = 3;
inline bool CallReq::has_call_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CallReq::set_has_call_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CallReq::clear_has_call_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CallReq::clear_call_type() {
  call_type_ = 0;
  clear_has_call_type();
}
inline ::StreamService::CallType CallReq::call_type() const {
  // @@protoc_insertion_point(field_get:StreamService.CallReq.call_type)
  return static_cast< ::StreamService::CallType >(call_type_);
}
inline void CallReq::set_call_type(::StreamService::CallType value) {
  assert(::StreamService::CallType_IsValid(value));
  set_has_call_type();
  call_type_ = value;
  // @@protoc_insertion_point(field_set:StreamService.CallReq.call_type)
}

// optional string reversed = 10;
inline bool CallReq::has_reversed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CallReq::set_has_reversed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CallReq::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CallReq::clear_reversed() {
  reversed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reversed();
}
inline const ::std::string& CallReq::reversed() const {
  // @@protoc_insertion_point(field_get:StreamService.CallReq.reversed)
  return reversed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallReq::set_reversed(const ::std::string& value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.CallReq.reversed)
}
inline void CallReq::set_reversed(const char* value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.CallReq.reversed)
}
inline void CallReq::set_reversed(const char* value, size_t size) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.CallReq.reversed)
}
inline ::std::string* CallReq::mutable_reversed() {
  set_has_reversed();
  // @@protoc_insertion_point(field_mutable:StreamService.CallReq.reversed)
  return reversed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallReq::release_reversed() {
  clear_has_reversed();
  return reversed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallReq::set_allocated_reversed(::std::string* reversed) {
  if (reversed != NULL) {
    set_has_reversed();
  } else {
    clear_has_reversed();
  }
  reversed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reversed);
  // @@protoc_insertion_point(field_set_allocated:StreamService.CallReq.reversed)
}

// -------------------------------------------------------------------

// CallRes

// required string from_user_name = 1;
inline bool CallRes::has_from_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallRes::set_has_from_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallRes::clear_has_from_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallRes::clear_from_user_name() {
  from_user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_user_name();
}
inline const ::std::string& CallRes::from_user_name() const {
  // @@protoc_insertion_point(field_get:StreamService.CallRes.from_user_name)
  return from_user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRes::set_from_user_name(const ::std::string& value) {
  set_has_from_user_name();
  from_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.CallRes.from_user_name)
}
inline void CallRes::set_from_user_name(const char* value) {
  set_has_from_user_name();
  from_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.CallRes.from_user_name)
}
inline void CallRes::set_from_user_name(const char* value, size_t size) {
  set_has_from_user_name();
  from_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.CallRes.from_user_name)
}
inline ::std::string* CallRes::mutable_from_user_name() {
  set_has_from_user_name();
  // @@protoc_insertion_point(field_mutable:StreamService.CallRes.from_user_name)
  return from_user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallRes::release_from_user_name() {
  clear_has_from_user_name();
  return from_user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRes::set_allocated_from_user_name(::std::string* from_user_name) {
  if (from_user_name != NULL) {
    set_has_from_user_name();
  } else {
    clear_has_from_user_name();
  }
  from_user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_user_name);
  // @@protoc_insertion_point(field_set_allocated:StreamService.CallRes.from_user_name)
}

// required string to_session_name = 2;
inline bool CallRes::has_to_session_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallRes::set_has_to_session_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CallRes::clear_has_to_session_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CallRes::clear_to_session_name() {
  to_session_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_session_name();
}
inline const ::std::string& CallRes::to_session_name() const {
  // @@protoc_insertion_point(field_get:StreamService.CallRes.to_session_name)
  return to_session_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRes::set_to_session_name(const ::std::string& value) {
  set_has_to_session_name();
  to_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.CallRes.to_session_name)
}
inline void CallRes::set_to_session_name(const char* value) {
  set_has_to_session_name();
  to_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.CallRes.to_session_name)
}
inline void CallRes::set_to_session_name(const char* value, size_t size) {
  set_has_to_session_name();
  to_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.CallRes.to_session_name)
}
inline ::std::string* CallRes::mutable_to_session_name() {
  set_has_to_session_name();
  // @@protoc_insertion_point(field_mutable:StreamService.CallRes.to_session_name)
  return to_session_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallRes::release_to_session_name() {
  clear_has_to_session_name();
  return to_session_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRes::set_allocated_to_session_name(::std::string* to_session_name) {
  if (to_session_name != NULL) {
    set_has_to_session_name();
  } else {
    clear_has_to_session_name();
  }
  to_session_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_session_name);
  // @@protoc_insertion_point(field_set_allocated:StreamService.CallRes.to_session_name)
}

// required .StreamService.CallType call_type = 3;
inline bool CallRes::has_call_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CallRes::set_has_call_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CallRes::clear_has_call_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CallRes::clear_call_type() {
  call_type_ = 0;
  clear_has_call_type();
}
inline ::StreamService::CallType CallRes::call_type() const {
  // @@protoc_insertion_point(field_get:StreamService.CallRes.call_type)
  return static_cast< ::StreamService::CallType >(call_type_);
}
inline void CallRes::set_call_type(::StreamService::CallType value) {
  assert(::StreamService::CallType_IsValid(value));
  set_has_call_type();
  call_type_ = value;
  // @@protoc_insertion_point(field_set:StreamService.CallRes.call_type)
}

// required .StreamService.CallResultType call_result_type = 4;
inline bool CallRes::has_call_result_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CallRes::set_has_call_result_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CallRes::clear_has_call_result_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CallRes::clear_call_result_type() {
  call_result_type_ = 0;
  clear_has_call_result_type();
}
inline ::StreamService::CallResultType CallRes::call_result_type() const {
  // @@protoc_insertion_point(field_get:StreamService.CallRes.call_result_type)
  return static_cast< ::StreamService::CallResultType >(call_result_type_);
}
inline void CallRes::set_call_result_type(::StreamService::CallResultType value) {
  assert(::StreamService::CallResultType_IsValid(value));
  set_has_call_result_type();
  call_result_type_ = value;
  // @@protoc_insertion_point(field_set:StreamService.CallRes.call_result_type)
}

// optional string reversed = 10;
inline bool CallRes::has_reversed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CallRes::set_has_reversed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CallRes::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CallRes::clear_reversed() {
  reversed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reversed();
}
inline const ::std::string& CallRes::reversed() const {
  // @@protoc_insertion_point(field_get:StreamService.CallRes.reversed)
  return reversed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRes::set_reversed(const ::std::string& value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.CallRes.reversed)
}
inline void CallRes::set_reversed(const char* value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.CallRes.reversed)
}
inline void CallRes::set_reversed(const char* value, size_t size) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.CallRes.reversed)
}
inline ::std::string* CallRes::mutable_reversed() {
  set_has_reversed();
  // @@protoc_insertion_point(field_mutable:StreamService.CallRes.reversed)
  return reversed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallRes::release_reversed() {
  clear_has_reversed();
  return reversed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRes::set_allocated_reversed(::std::string* reversed) {
  if (reversed != NULL) {
    set_has_reversed();
  } else {
    clear_has_reversed();
  }
  reversed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reversed);
  // @@protoc_insertion_point(field_set_allocated:StreamService.CallRes.reversed)
}

// -------------------------------------------------------------------

// HangUpReq

// required string from_user_name = 1;
inline bool HangUpReq::has_from_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HangUpReq::set_has_from_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HangUpReq::clear_has_from_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HangUpReq::clear_from_user_name() {
  from_user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_user_name();
}
inline const ::std::string& HangUpReq::from_user_name() const {
  // @@protoc_insertion_point(field_get:StreamService.HangUpReq.from_user_name)
  return from_user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HangUpReq::set_from_user_name(const ::std::string& value) {
  set_has_from_user_name();
  from_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.HangUpReq.from_user_name)
}
inline void HangUpReq::set_from_user_name(const char* value) {
  set_has_from_user_name();
  from_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.HangUpReq.from_user_name)
}
inline void HangUpReq::set_from_user_name(const char* value, size_t size) {
  set_has_from_user_name();
  from_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.HangUpReq.from_user_name)
}
inline ::std::string* HangUpReq::mutable_from_user_name() {
  set_has_from_user_name();
  // @@protoc_insertion_point(field_mutable:StreamService.HangUpReq.from_user_name)
  return from_user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HangUpReq::release_from_user_name() {
  clear_has_from_user_name();
  return from_user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HangUpReq::set_allocated_from_user_name(::std::string* from_user_name) {
  if (from_user_name != NULL) {
    set_has_from_user_name();
  } else {
    clear_has_from_user_name();
  }
  from_user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_user_name);
  // @@protoc_insertion_point(field_set_allocated:StreamService.HangUpReq.from_user_name)
}

// required string to_session_name = 2;
inline bool HangUpReq::has_to_session_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HangUpReq::set_has_to_session_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HangUpReq::clear_has_to_session_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HangUpReq::clear_to_session_name() {
  to_session_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_session_name();
}
inline const ::std::string& HangUpReq::to_session_name() const {
  // @@protoc_insertion_point(field_get:StreamService.HangUpReq.to_session_name)
  return to_session_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HangUpReq::set_to_session_name(const ::std::string& value) {
  set_has_to_session_name();
  to_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.HangUpReq.to_session_name)
}
inline void HangUpReq::set_to_session_name(const char* value) {
  set_has_to_session_name();
  to_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.HangUpReq.to_session_name)
}
inline void HangUpReq::set_to_session_name(const char* value, size_t size) {
  set_has_to_session_name();
  to_session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.HangUpReq.to_session_name)
}
inline ::std::string* HangUpReq::mutable_to_session_name() {
  set_has_to_session_name();
  // @@protoc_insertion_point(field_mutable:StreamService.HangUpReq.to_session_name)
  return to_session_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HangUpReq::release_to_session_name() {
  clear_has_to_session_name();
  return to_session_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HangUpReq::set_allocated_to_session_name(::std::string* to_session_name) {
  if (to_session_name != NULL) {
    set_has_to_session_name();
  } else {
    clear_has_to_session_name();
  }
  to_session_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_session_name);
  // @@protoc_insertion_point(field_set_allocated:StreamService.HangUpReq.to_session_name)
}

// required .StreamService.CallType call_type = 3;
inline bool HangUpReq::has_call_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HangUpReq::set_has_call_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HangUpReq::clear_has_call_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HangUpReq::clear_call_type() {
  call_type_ = 0;
  clear_has_call_type();
}
inline ::StreamService::CallType HangUpReq::call_type() const {
  // @@protoc_insertion_point(field_get:StreamService.HangUpReq.call_type)
  return static_cast< ::StreamService::CallType >(call_type_);
}
inline void HangUpReq::set_call_type(::StreamService::CallType value) {
  assert(::StreamService::CallType_IsValid(value));
  set_has_call_type();
  call_type_ = value;
  // @@protoc_insertion_point(field_set:StreamService.HangUpReq.call_type)
}

// optional string reversed = 10;
inline bool HangUpReq::has_reversed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HangUpReq::set_has_reversed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HangUpReq::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HangUpReq::clear_reversed() {
  reversed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reversed();
}
inline const ::std::string& HangUpReq::reversed() const {
  // @@protoc_insertion_point(field_get:StreamService.HangUpReq.reversed)
  return reversed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HangUpReq::set_reversed(const ::std::string& value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.HangUpReq.reversed)
}
inline void HangUpReq::set_reversed(const char* value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.HangUpReq.reversed)
}
inline void HangUpReq::set_reversed(const char* value, size_t size) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.HangUpReq.reversed)
}
inline ::std::string* HangUpReq::mutable_reversed() {
  set_has_reversed();
  // @@protoc_insertion_point(field_mutable:StreamService.HangUpReq.reversed)
  return reversed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HangUpReq::release_reversed() {
  clear_has_reversed();
  return reversed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HangUpReq::set_allocated_reversed(::std::string* reversed) {
  if (reversed != NULL) {
    set_has_reversed();
  } else {
    clear_has_reversed();
  }
  reversed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reversed);
  // @@protoc_insertion_point(field_set_allocated:StreamService.HangUpReq.reversed)
}

// -------------------------------------------------------------------

// StreamExhange

// required string from_user_name = 1;
inline bool StreamExhange::has_from_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamExhange::set_has_from_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamExhange::clear_has_from_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamExhange::clear_from_user_name() {
  from_user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_user_name();
}
inline const ::std::string& StreamExhange::from_user_name() const {
  // @@protoc_insertion_point(field_get:StreamService.StreamExhange.from_user_name)
  return from_user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamExhange::set_from_user_name(const ::std::string& value) {
  set_has_from_user_name();
  from_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.StreamExhange.from_user_name)
}
inline void StreamExhange::set_from_user_name(const char* value) {
  set_has_from_user_name();
  from_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.StreamExhange.from_user_name)
}
inline void StreamExhange::set_from_user_name(const char* value, size_t size) {
  set_has_from_user_name();
  from_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.StreamExhange.from_user_name)
}
inline ::std::string* StreamExhange::mutable_from_user_name() {
  set_has_from_user_name();
  // @@protoc_insertion_point(field_mutable:StreamService.StreamExhange.from_user_name)
  return from_user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamExhange::release_from_user_name() {
  clear_has_from_user_name();
  return from_user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamExhange::set_allocated_from_user_name(::std::string* from_user_name) {
  if (from_user_name != NULL) {
    set_has_from_user_name();
  } else {
    clear_has_from_user_name();
  }
  from_user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_user_name);
  // @@protoc_insertion_point(field_set_allocated:StreamService.StreamExhange.from_user_name)
}

// repeated string to_session_name = 2;
inline int StreamExhange::to_session_name_size() const {
  return to_session_name_.size();
}
inline void StreamExhange::clear_to_session_name() {
  to_session_name_.Clear();
}
inline const ::std::string& StreamExhange::to_session_name(int index) const {
  // @@protoc_insertion_point(field_get:StreamService.StreamExhange.to_session_name)
  return to_session_name_.Get(index);
}
inline ::std::string* StreamExhange::mutable_to_session_name(int index) {
  // @@protoc_insertion_point(field_mutable:StreamService.StreamExhange.to_session_name)
  return to_session_name_.Mutable(index);
}
inline void StreamExhange::set_to_session_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StreamService.StreamExhange.to_session_name)
  to_session_name_.Mutable(index)->assign(value);
}
inline void StreamExhange::set_to_session_name(int index, const char* value) {
  to_session_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StreamService.StreamExhange.to_session_name)
}
inline void StreamExhange::set_to_session_name(int index, const char* value, size_t size) {
  to_session_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StreamService.StreamExhange.to_session_name)
}
inline ::std::string* StreamExhange::add_to_session_name() {
  return to_session_name_.Add();
}
inline void StreamExhange::add_to_session_name(const ::std::string& value) {
  to_session_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StreamService.StreamExhange.to_session_name)
}
inline void StreamExhange::add_to_session_name(const char* value) {
  to_session_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StreamService.StreamExhange.to_session_name)
}
inline void StreamExhange::add_to_session_name(const char* value, size_t size) {
  to_session_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StreamService.StreamExhange.to_session_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StreamExhange::to_session_name() const {
  // @@protoc_insertion_point(field_list:StreamService.StreamExhange.to_session_name)
  return to_session_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StreamExhange::mutable_to_session_name() {
  // @@protoc_insertion_point(field_mutable_list:StreamService.StreamExhange.to_session_name)
  return &to_session_name_;
}

// required .StreamService.CallType call_type = 3;
inline bool StreamExhange::has_call_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamExhange::set_has_call_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamExhange::clear_has_call_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamExhange::clear_call_type() {
  call_type_ = 0;
  clear_has_call_type();
}
inline ::StreamService::CallType StreamExhange::call_type() const {
  // @@protoc_insertion_point(field_get:StreamService.StreamExhange.call_type)
  return static_cast< ::StreamService::CallType >(call_type_);
}
inline void StreamExhange::set_call_type(::StreamService::CallType value) {
  assert(::StreamService::CallType_IsValid(value));
  set_has_call_type();
  call_type_ = value;
  // @@protoc_insertion_point(field_set:StreamService.StreamExhange.call_type)
}

// optional string reversed = 10;
inline bool StreamExhange::has_reversed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamExhange::set_has_reversed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamExhange::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamExhange::clear_reversed() {
  reversed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reversed();
}
inline const ::std::string& StreamExhange::reversed() const {
  // @@protoc_insertion_point(field_get:StreamService.StreamExhange.reversed)
  return reversed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamExhange::set_reversed(const ::std::string& value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamService.StreamExhange.reversed)
}
inline void StreamExhange::set_reversed(const char* value) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamService.StreamExhange.reversed)
}
inline void StreamExhange::set_reversed(const char* value, size_t size) {
  set_has_reversed();
  reversed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamService.StreamExhange.reversed)
}
inline ::std::string* StreamExhange::mutable_reversed() {
  set_has_reversed();
  // @@protoc_insertion_point(field_mutable:StreamService.StreamExhange.reversed)
  return reversed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamExhange::release_reversed() {
  clear_has_reversed();
  return reversed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamExhange::set_allocated_reversed(::std::string* reversed) {
  if (reversed != NULL) {
    set_has_reversed();
  } else {
    clear_has_reversed();
  }
  reversed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reversed);
  // @@protoc_insertion_point(field_set_allocated:StreamService.StreamExhange.reversed)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StreamService

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::StreamService::MessageCmdID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StreamService::MessageCmdID>() {
  return ::StreamService::MessageCmdID_descriptor();
}
template <> struct is_proto_enum< ::StreamService::LoginResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StreamService::LoginResultType>() {
  return ::StreamService::LoginResultType_descriptor();
}
template <> struct is_proto_enum< ::StreamService::CallType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StreamService::CallType>() {
  return ::StreamService::CallType_descriptor();
}
template <> struct is_proto_enum< ::StreamService::CallResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StreamService::CallResultType>() {
  return ::StreamService::CallResultType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StreamService_2eproto__INCLUDED
